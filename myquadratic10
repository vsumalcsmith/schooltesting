//**********************************************************
//Purpose: Use the basic methods larned throughout this course
//         to define objects. The objects in the class below
//         should be able to be called in the main driver!
//   
//         
//Author:   Malcolm Smith, Group #10
//Class:    CS1301
//Date:     11/28/2018
//
//**********************************************************

import java.util.Scanner;
import java.util.*;
import java.util.Date;
//import java.util.Array;
import java.io.*;


public class QuadraticEquation10{
   private double a;
   private double b;
   private double c;
   
   //No-argument Constructor assigning 1 to a,b,c
   public QuadraticEquation10(){
      a = 1;
      b = 1;
      c = 1;

   }
   //Constructor for the arguments a,b,c
   public QuadraticEquation10(double a1, double b1, double c1){
      a = a1;
      b = b1;
      c = c1;
   }
   //getter methods for a,b,c
   public double getA(){
      return a; 
   }
   public double getB(){
      return b;
   }
   public double getC(){
      return c;
   }
   //setter methods for a,b,c 
   public double setA(double a){
      this.a = a;
      return a;
   }
   public double setB(double b){
      this.b = b;
      return b;
   }
   public double setC(double c){
      this.c = c;
      return c;
   }
   
   //getDiscriminant() method finds the discriminant using b2-4ac
   public double getDiscriminant(){
      return ((b*b) - 4* a* c);
   }
   // fnding x1 using the formula -b + sqrt(b^2 - 4ac)/2a  
   public double getRoot1(){
      return (-b + Math.sqrt(getDiscriminant()))/(2*a);

   }
   // fnding x2 using the formula -b - sqrt(b^2 - 4ac)/2a 
   public double getRoot2(){
      return (-b - Math.sqrt(getDiscriminant()))/(2*a);
   }

//tostring method that returns formated statesments based on if Discriminate is positive or negative.
   public String toString (){
      String results="";
      System.out.println();
      System.out.print("\n\tEquation:\t"+a+"X^2+"+b+"X+"+c);
      if(getDiscriminant() >=0){
         System.out.printf ("\n\t%-20s%10.2f","Discriminant:",getDiscriminant());   
         System.out.printf ("\n\t%-20s%10.2f","Root1:",getRoot1());
         System.out.printf ("\n\t%-20s%10.2f","Root2:",getRoot2());
         
         }
      else
         System.out.printf ("\n\t%-20s","Discriminate is negative.No real solution");  

      return results;
   }

}   

//Sample input: 1.0 3  1  1 2.0 1  1.0 2.0  3.0
//
//Sample output:
//1.	Equation 0 with default values (1, 1, 1)
//
//
//	Equation:	1.0 X^2  + 1.0 X  +1.0
//	Discriminant is negative. No real solution
//
//	2.	Equation 1:
//
//	Discriminant:             5.00
//	Root1:                   -0.38
//	Root2:                   -2.62
//
//	Equation:	1.0 X^2  + 3.0 X  +1.0
//	Discriminant is:	5.00
//	Root1 is        	-0.38
//	Root2 is        	-2.62
//
//	3.	Equation 2:
//
//	Discriminant:             0.00
//	Root1 = Root2 =          -1.00
//
//	Equation:	1.0 X^2  + 2.0 X  +1.0
//	Discriminant is:	0.00
//	Root1 is        	-1.00
//	Root2 is        	-1.00
//
//	4.	Equation 3:
//
//	Discriminant:            -8.00
//	No real solution    
//
//	Equation:	1.0 X^2  + 2.0 X  +3.0
//	Discriminant is negative. No real solution
//
//	5.	Original Equation 0 Coefficients
//	Coefficient a =      1.00
//	Coefficient b =      1.00
//	Coefficient c =      1.00
//
//	6.	Equation 0 Updated Coefficients
//	Coefficient a =     10.00
//	Coefficient b =     15.00
//	Coefficient c =     25.00
//	7.	Equation 0:
//
//	Discriminant:          -775.00
//	No real solution    
//
//	Equation:	10.0 X^2  + 15.0 X  +25.0
//	Discriminant is negative. No real solution










/////////////////////////////////////////////////////////////////////////////////////

//•	Attach (do not turn in any hardcopy) via BlazeView the following items:
//a.	A single typed page with your name, class, date, and program title. The report should include what you learned from the programming assignment, problems faced, skills learned, and your observations.
//b.	Simple output  
//c.	UML diagram
//d.	Zip and attach all your files
//e.	Make sure that:
//i.	The program is well documented and readable.
//ii.	The output is well labeled and aligned

//Sample input: 1.0 3  1  1 2.0 1  1.0 2.0  3.0
//
//Sample output:
//1.	Equation 0 with default values (1, 1, 1)
//
//
//	Equation:	1.0 X^2  + 1.0 X  +1.0
//	Discriminant is negative. No real solution
//
//	2.	Equation 1:
//
//	Discriminant:             5.00
//	Root1:                   -0.38
//	Root2:                   -2.62
//
//	Equation:	1.0 X^2  + 3.0 X  +1.0
//	Discriminant is:	5.00
//	Root1 is        	-0.38
//	Root2 is        	-2.62
//
//	3.	Equation 2:
//
//	Discriminant:             0.00
//	Root1 = Root2 =          -1.00
//
//	Equation:	1.0 X^2  + 2.0 X  +1.0
//	Discriminant is:	0.00
//	Root1 is        	-1.00
//	Root2 is        	-1.00
//
//	4.	Equation 3:
//
//	Discriminant:            -8.00
//	No real solution    
//
//	Equation:	1.0 X^2  + 2.0 X  +3.0
//	Discriminant is negative. No real solution
//
//	5.	Original Equation 0 Coefficients
//	Coefficient a =      1.00
//	Coefficient b =      1.00
//	Coefficient c =      1.00
//
//	6.	Equation 0 Updated Coefficients
//	Coefficient a =     10.00
//	Coefficient b =     15.00
//	Coefficient c =     25.00
//	7.	Equation 0:
//
//	Discriminant:          -775.00
//	No real solution    
//
//	Equation:	10.0 X^2  + 15.0 X  +25.0
//	Discriminant is negative. No real solution










/////////////////////////////////////////////////////////////////////////////////////

//•	Attach (do not turn in any hardcopy) via BlazeView the following items:
//a.	A single typed page with your name, class, date, and program title. The report should include what you learned from the programming assignment, problems faced, skills learned, and your observations.
//b.	Simple output  
//c.	UML diagram
//d.	Zip and attach all your files
//e.	Make sure that:
//i.	The program is well documented and readable.
//ii.	The output is well labeled and aligned
